{
  "ast": null,
  "code": "var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport axios from \"axios\";\nimport getConfig from 'next/config';\nconst {\n  serverRuntimeConfig,\n  publicRuntimeConfig\n} = getConfig();\n\nclass Speaker extends Component {\n  static GetSpeakerUrl() {\n    if (false) {\n      return process.env.RESTURL_SPEAKER_PROD || publicRuntimeConfig.RESTURL_SPEAKER_PROD;\n    } else {\n      return process.env.RESTURL_SPEAKER_DEV;\n    }\n  }\n\n  static async getInitialProps({\n    query\n  }) {\n    var promise = axios.get(`${Speaker.GetSpeakerUrl()}/${query.speakerId}`).then(response => {\n      return {\n        hasErrored: false,\n        speakerDataOne: response.data\n      };\n    }).catch(error => {\n      return {\n        hasErrored: true,\n        message: error.message\n      };\n    });\n    return promise;\n  }\n\n  render() {\n    console.log(this.props.speakerDataOne);\n    return __jsx(\"div\", {\n      className: \"container\"\n    }, __jsx(\"div\", {\n      className: \"row\"\n    }, __jsx(\"h2\", {\n      className: \"margintopbottom20\"\n    }, this.props.speakerDataOne.firstName, \" \", this.props.speakerDataOne.lastName), __jsx(\"p\", {\n      className: \"margintopbottom20\"\n    }, this.props.speakerDataOne.bio)));\n  }\n\n}\n\nSpeaker.defaultProps = {};\nexport default Speaker;",
  "map": {
    "version": 3,
    "sources": [
      "/Users/romyalula/IdeaProjects/Goumies/myConstantLearning/Back/Javascript/Building Server-side Rendered React Apps for Beginners/src/fundamentals/Building a server-side rendered digital clock/MyApp/pages/speaker.js"
    ],
    "names": [
      "React",
      "Component",
      "axios",
      "getConfig",
      "serverRuntimeConfig",
      "publicRuntimeConfig",
      "Speaker",
      "GetSpeakerUrl",
      "process",
      "env",
      "RESTURL_SPEAKER_PROD",
      "RESTURL_SPEAKER_DEV",
      "getInitialProps",
      "query",
      "promise",
      "get",
      "speakerId",
      "then",
      "response",
      "hasErrored",
      "speakerDataOne",
      "data",
      "catch",
      "error",
      "message",
      "render",
      "console",
      "log",
      "props",
      "firstName",
      "lastName",
      "bio",
      "defaultProps"
    ],
    "mappings": ";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,MAAM;AAACC,EAAAA,mBAAD;AAAsBC,EAAAA;AAAtB,IAA6CF,SAAS,EAA5D;;AAEA,MAAMG,OAAN,SAAsBL,SAAtB,CAAgC;AAE5B,SAAOM,aAAP,GAAuB;AACnB,eAA2C;AACvC,aAAOC,OAAO,CAACC,GAAR,CAAYC,oBAAZ,IACAL,mBAAmB,CAACK,oBAD3B;AAEH,KAHD,MAGO;AACH,aAAOF,OAAO,CAACC,GAAR,CAAYE,mBAAnB;AACH;AACJ;;AAED,eAAaC,eAAb,CAA6B;AAACC,IAAAA;AAAD,GAA7B,EAAsC;AAElC,QAAIC,OAAO,GAAGZ,KAAK,CACnBa,GADc,CACT,GAAET,OAAO,CAACC,aAAR,EAAwB,IAAGM,KAAK,CAACG,SAAU,EADpC,EAEbC,IAFa,CAERC,QAAQ,IAAI;AACd,aAAO;AACHC,QAAAA,UAAU,EAAE,KADT;AAEHC,QAAAA,cAAc,EAAEF,QAAQ,CAACG;AAFtB,OAAP;AAIH,KAPa,EAOXC,KAPW,CAOLC,KAAK,IAAI;AACd,aAAO;AACHJ,QAAAA,UAAU,EAAE,IADT;AAEHK,QAAAA,OAAO,EAAED,KAAK,CAACC;AAFZ,OAAP;AAIH,KAZa,CAAd;AAaA,WAAOV,OAAP;AACH;;AAEDW,EAAAA,MAAM,GAAG;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWR,cAAvB;AACA,WACI;AAAK,MAAA,SAAS,EAAC;AAAf,OACI;AAAK,MAAA,SAAS,EAAC;AAAf,OACI;AAAI,MAAA,SAAS,EAAC;AAAd,OAAmC,KAAKQ,KAAL,CAAWR,cAAX,CAA0BS,SAA7D,OAAyE,KAAKD,KAAL,CAAWR,cAAX,CAA0BU,QAAnG,CADJ,EAEI;AAAG,MAAA,SAAS,EAAC;AAAb,OAAkC,KAAKF,KAAL,CAAWR,cAAX,CAA0BW,GAA5D,CAFJ,CADJ,CADJ;AAQH;;AAvC2B;;AA2ChCzB,OAAO,CAAC0B,YAAR,GAAuB,EAAvB;AAEA,eAAe1B,OAAf",
    "sourcesContent": [
      "import React, {Component} from 'react';\nimport axios from \"axios\";\nimport getConfig from 'next/config';\nconst {serverRuntimeConfig, publicRuntimeConfig} = getConfig();\n\nclass Speaker extends Component {\n\n    static GetSpeakerUrl() {\n        if (process.env.NODE_ENV === \"production\") {\n            return process.env.RESTURL_SPEAKER_PROD\n                || publicRuntimeConfig.RESTURL_SPEAKER_PROD;\n        } else {\n            return process.env.RESTURL_SPEAKER_DEV;\n        }\n    }\n\n    static async getInitialProps({query}) {\n\n        var promise = axios.\n        get(`${Speaker.GetSpeakerUrl()}/${query.speakerId}`)\n        .then(response => {\n            return {\n                hasErrored: false,\n                speakerDataOne: response.data\n            };\n        }).catch(error => {\n            return {\n                hasErrored: true,\n                message: error.message\n            }\n        });\n        return promise;\n    }\n\n    render() {\n        console.log(this.props.speakerDataOne)\n        return (\n            <div className='container'>\n                <div className=\"row\">\n                    <h2 className='margintopbottom20'>{this.props.speakerDataOne.firstName} {this.props.speakerDataOne.lastName}</h2>\n                    <p className='margintopbottom20'>{this.props.speakerDataOne.bio}</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nSpeaker.propTypes = {};\nSpeaker.defaultProps = {};\n\nexport default Speaker;\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}